@page "/login"
@layout LoginLayout
@inject HttpClient httpClient
@inject NavigationManager navigator
@inject ILocalStorageService localStorage

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h3>Silakan Login</h3>

<EditForm Model="loginViewModel" FormName="Log" OnValidSubmit="HandleLogin">
    <div class="text_field mb-4">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginViewModel.Username" />
        <ValidationMessage For="() => loginViewModel.Username" />
    </div>
    <div class="text_field mb-4">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginViewModel.Password" />
        <ValidationMessage For="() => loginViewModel.Password" />
    </div>
    <div class="text_field mb-4">
        <label for="role">Role</label>
        <InputSelect class="form-control" @bind-Value="loginViewModel.Role">
            <option value="">Select Role</option>
            @foreach (var role in roles)
            {
                <option value="@role.Value">@role.Text</option>
            }
        </InputSelect>
        <ValidationMessage For="() => loginViewModel.Role" />
    </div>
    <div class="text-center mb-3">
        <span class="text-danger">@errorMessage</span>
    </div>
    <input type="submit" value="Login" class="btn btn-primary mb-4" />

    <DataAnnotationsValidator />
</EditForm>

@code {
    [SupplyParameterFromForm]
    public LoginViewModel loginViewModel { get; set; } = new();

    private string? errorMessage { get; set; }

    private List<SelectListItem> roles = new List<SelectListItem>
    {
        new SelectListItem { Text = "Admin", Value = "Admin" },
        new SelectListItem { Text = "Employee", Value = "Employee" }
    };

    private string? tokenToSave { get; set; } = null;
    private bool loginSucceeded;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (loginSucceeded)
        {
            if (tokenToSave != null)
            {
                await localStorage.SetItemAsync("AuthToken", tokenToSave);

                await Task.Delay(500); 
                navigator.NavigateTo("/");
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("https://localhost:7058/api/Auth/Login", loginViewModel);

            if (response.IsSuccessStatusCode)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<TokenRespondDto>();
                tokenToSave = tokenResponse.Token;
                loginSucceeded = true;

                await InvokeAsync(StateHasChanged);
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }


}

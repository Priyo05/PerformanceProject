@page "/editmain/{IndicatorId:int}"
@* @inject ReportMainIndicatorService _service *@
@inject HttpClient httpClient
@inject NavigationManager navigator

@rendermode InteractiveServer


<div class="card">

    <div class="card-header">
        Indikator Utama Kinerja Periode : @MainIndikator.Periode
    </div>

    <EditForm Model="@MainIndikator" FormName="mainindicatorform" class="p-3" OnValidSubmit="CreateMainIndicator">
        <div class="text_field mb-2 w-50">
            <label for="StrategicObjective">StrategicObjective</label>
            <InputText id="StrategicObjective" class="form-control" @bind-Value="MainIndikator.StrategicObjective" />
            <ValidationMessage For="() => MainIndikator.StrategicObjective" />
        </div>
        <div class="text_field mb-2 w-50">
            <label for="KPI">KPI</label>
            <InputText id="KPI" class="form-control" @bind-Value="MainIndikator.KPI" />
            <ValidationMessage For="() => MainIndikator.KPI" />

        </div>
        <div class="text_field mb-2 w-50">
            <label for="UnitOfMeasurement">UnitOfMeasurement</label>
            <InputText id="UnitOfMeasurement" class="form-control" @bind-Value="MainIndikator.UnitOfMeasurement" />
            <ValidationMessage For="() => MainIndikator.UnitOfMeasurement" />
        </div>
        <div class="text_field mb-2 w-50">
            <label for="Bobot">Bobot</label>
            <InputNumber id="Bobot" class="form-control" @bind-Value="MainIndikator.Bobot" />
            <ValidationMessage For="() => MainIndikator.Bobot" />
        </div>
        <div class="text_field mb-2 w-50">
            <label for="Title">Title</label>
            <InputSelect id="Title" class="form-control" @bind-Value="MainIndikator.Polarisasi">
                <option value="">--Polarisasi--</option>
                @foreach (var pola in Values)
                {
                    <option value="@pola">@pola</option>
                }
            </InputSelect>
            <ValidationMessage For="() => MainIndikator.Polarisasi" />
        </div>
        <div class="text_field mb-2 w-50 ">
            <label for="Target">Target</label>
            <InputNumber id="Target" class="form-control" @bind-Value="MainIndikator.Target" />
            <ValidationMessage For="() => MainIndikator.Target" />
        </div>
        <div class="text_field mb-2  w-50">
            <label for="Aktual">Aktual</label>
            <InputNumber id="Aktual" class="form-control" @bind-Value="MainIndikator.Aktual" />
            <ValidationMessage For="() => MainIndikator.Aktual" />
        </div>

        <DataAnnotationsValidator />

        <button type="submit" class="btn btn-primary mb-1">Save</button>
    </EditForm>
</div>
<button type="submit" class="btn btn-primary mt-2" @onclick="() => Back()">Back</button>


@code {
    [Parameter]
    public int IndicatorId { get; set; }

    [SupplyParameterFromForm(FormName = "mainindicatorform")]
    private MainIndikatorViewModel MainIndikator { get; set; } = new();
    private string? ErrorMessage { get; set; }

    private List<string> Values = new List<string>
    {
        "Maximum",
        "Minimum",
        "Stabilize"
    };

    protected override async Task OnInitializedAsync()
    {
        var url = $"https://localhost:7058/GetMainIndicatorById/{IndicatorId}";

        var response = await httpClient.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {

            MainIndikator = await response.Content.ReadFromJsonAsync<MainIndikatorViewModel>(new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        }
        else
        {
            ErrorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Ada Error: " + ErrorMessage);
        }
    }


    private async Task CreateMainIndicator()
    {
        var url = $"https://localhost:7058/UpdateMainIndicator/{IndicatorId}";

        var response = await httpClient.PutAsJsonAsync(url, MainIndikator);
        if (response.IsSuccessStatusCode)
        {
            navigator.NavigateTo("/indikatorutamakerja");
        }
        else
        {
            ErrorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Error: " + ErrorMessage);
        }
    }

    private void Back()
    {
        navigator.NavigateTo("/indikatorutamakerja");
    }

}
